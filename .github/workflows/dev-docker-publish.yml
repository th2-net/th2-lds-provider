name: Dev build and publish artifacts and Docker distributions

on:
  push:
    branches-ignore:
      - master
      - version-*

jobs:
  metadata:
    runs-on: ubuntu-20.04
    outputs:
      python_grpc_ver: ${{ steps.python_grpc_ver.outputs.value }}
      grpc_release_ver: ${{ steps.grpc_release_ver.outputs.value }}
      release_ver: ${{ steps.release_ver.outputs.value }}
    steps:
      - uses: actions/checkout@v3
      - name: Get branch name
        id: branch
        run: echo "branch_name=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
      - name: Get SHA of the commit
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        # App
      - name: Get release_version
        id: ver
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: gradle.properties
          properties: release_version
      - name: Build custom release version
        id: release_ver
        run: echo value="${{ steps.ver.outputs.release_version }}-${{ steps.branch.outputs.branch_name }}-${{ github.run_id }}-${{ steps.sha.outputs.sha_short }}" >> $GITHUB_OUTPUT
      - name: Show custom release version
        run: echo ${{ steps.release_ver.outputs.value }}
        # gRPC
      - name: Get gRPC release_version
        id: grpc_ver
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: grpc/gradle.properties
          properties: release_version
      - name: Build gRPC custom release version
        id: grpc_release_ver
        run: echo value="${{ steps.grpc_ver.outputs.release_version }}-${{ steps.branch.outputs.branch_name }}-${{ github.run_id }}-SNAPSHOT" >> $GITHUB_OUTPUT
      - name: Show gRPC custom release version
        run: echo ${{ steps.grpc_release_ver.outputs.value }}
      - name: Build custom gRPC python package version
        id: python_grpc_ver
        run: echo value="${{ steps.grpc_ver.outputs.release_version }}.dev${{ github.run_id }}" >> $GITHUB_OUTPUT
      - name: Show gRPC custom python release version
        run: echo ${{ steps.python_grpc_ver.outputs.value }}
  build-grpc-java:
    runs-on: ubuntu-20.04
    needs:
      - metadata
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Build and publish gRPC with Gradle
        run: ./gradlew --info --warning-mode all :grpc-lw-data-provider:build :grpc-lw-data-provider:publish -Prelease_version=${{ needs.metadata.grpc_release_ver }}
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SONATYPE_GPG_ARMORED_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SONATYPE_SIGNING_PASSWORD }}
  build-grpc-python:
    runs-on: ubuntu-20.04
    needs:
      - metadata
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Set version for current build in package_info.json
        uses: MerthinTechnologies/edit-json-action@v1
        with:
          filename: 'grpc/package_info.json'
          key: 'package_version'
          value: ${{ needs.metadata.outputs.python_grpc_ver }}
      - name: Build gRPC stubs with Gradle
        run: ./gradlew --info --warning-mode all :grpc-lw-data-provider:build
      - name: Build gRPC python package
        working-directory: ./grpc
        run: |
          pip install -r requirements.txt
          python setup.py generate -s
          python setup.py sdist
      - name: Publish gRPC distribution to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
          repository_url: https://upload.pypi.org/legacy/
          packages_dir: grpc/dist/
  build-docker:
    runs-on: ubuntu-20.04
    needs:
      - metadata
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Build and publish gRPC with Gradle
        run: ./gradlew --info --warning-mode all build dockerPrepare -Prelease_version=${{ needs.metadata.release_ver }}
      # Build and publish image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_OUTPUT
        id: meta
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ needs.metadata.release_ver }}
          labels: com.exactpro.th2.${{ steps.meta.outputs.REPOSITORY_NAME }}=${{ needs.metadata.release_ver }}
