import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.JsonReportRenderer

plugins {
    id 'com.exactpro.th2.artifacts-convensions'
    id 'application'
    id 'com.palantir.docker' version '0.25.0'
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
    id 'org.jetbrains.kotlin.kapt'
    id "org.owasp.dependencycheck" version "8.3.1"
    id 'org.jetbrains.kotlin.plugin.serialization' version "1.8.22"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id 'com.github.jk1.dependency-license-report' version '2.5'
    id "de.undercouch.download" version "5.4.0"
}

ext {
    dockerImageVersion = release_version
    cradleApiVersion = '5.2.0-dev'
    javalin = '5.4.2'
}

dependencyCheck {
    formats = ['SARIF', 'JSON', 'HTML']
    failBuildOnCVSS = 5
    //FIXME: we should check all used dependencies
    skipConfigurations = ['kapt', 'kaptClasspath_kaptKotlin', 'kaptTest', 'kaptTestFixtures']
    suppressionFile = file('suppressions.xml')
    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nodeEnabled = false
    }
}

dependencies {
    implementation("com.exactpro.th2:common:${commonVersion}") {
        exclude group: 'com.exactpro.th2', module: 'cradle-core'
        exclude group: 'com.exactpro.th2', module: 'cradle-cassandra'
    }

    implementation(platform('org.eclipse.jetty:jetty-bom:11.0.15')) {
        because('vulnerabilities in version 11.0.13. Can be removed after updating Javalin and Kotlin')
    }

    implementation "io.javalin:javalin:$javalin"
    implementation "io.javalin:javalin-micrometer:$javalin"

    implementation(platform('io.micrometer:micrometer-bom:1.10.1')) {
        because('should match the version in javalin-micrometer')
    }

    implementation('io.micrometer:micrometer-registry-prometheus')
    implementation 'org.apache.commons:commons-lang3'

    kapt("io.javalin.community.openapi:openapi-annotation-processor:$javalin")

    implementation("io.javalin.community.openapi:javalin-openapi-plugin:$javalin") {
        because("for /openapi route with JSON scheme")
    }
// swagger-ui-3.52.5.jar (pkg:maven/org.webjars/swagger-ui@3.52.5) : CVE-2018-25031
//    implementation("io.javalin.community.openapi:javalin-swagger-plugin:$javalin") {
//        because("for Swagger UI")
//    }
    implementation("io.javalin.community.openapi:javalin-redoc-plugin:$javalin") {
        because("for Re Doc UI")
    }

    implementation("com.exactpro.th2:cradle-cassandra:$cradleApiVersion")
    implementation('net.jpountz.lz4:lz4:1.3.0') {
        because('cassandra driver requires lz4 impl in classpath for compression')
    }
    implementation project(':grpc-lw-data-provider')

    implementation('io.prometheus:simpleclient') {
        because('need add custom metrics to provider')
    }

    implementation('org.apache.commons:commons-lang3')

    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.5.1'

    implementation 'io.netty:netty-buffer'

    testImplementation "io.javalin:javalin-testtools:$javalin"

    testImplementation(testFixtures("com.exactpro.th2:common:${commonVersion}"))
    testImplementation platform('org.testcontainers:testcontainers-bom:1.19.7')
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation "org.testcontainers:cassandra"

    testImplementation 'com.datastax.oss:java-driver-core'
}

test {
    useJUnitPlatform {
        excludeTags('integration-test')
    }
}

tasks.register('integrationTest', Test) {
    group = 'verification'
    useJUnitPlatform {
        includeTags('integration-test')
    }
    testLogging {
        showStandardStreams = true
    }
}

applicationName = 'service'

distTar {
    archiveFileName.set("${applicationName}.tar")
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}

application {
    mainClass.set('com.exactpro.th2.lwdataprovider.MainKt')
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

// For GitHub only
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

licenseReport {
    def licenseNormalizerBundlePath = "$buildDir/license-normalizer-bundle.json"

    if (!file(licenseNormalizerBundlePath).exists()) {
        download.run {
            src 'https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/license-normalizer-bundle.json'
            dest "$buildDir/license-normalizer-bundle.json"
            overwrite false
        }
    }

    filters = [
            new LicenseBundleNormalizer(licenseNormalizerBundlePath, false)
    ]
    renderers = [
            new JsonReportRenderer('licenses.json', false),
    ]
    excludeOwnGroup = false
    allowedLicensesFile = new URL("https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/allowed-licenses.json")
}