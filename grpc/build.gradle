import static org.gradle.api.file.DuplicatesStrategy.*

plugins {
    id 'com.exactpro.th2.artifacts-convensions'
    id "com.google.protobuf" version "0.9.2"
}

allprojects {
    group = 'com.exactpro.th2'
    version = release_version
    String suffix = property('version_suffix').toString()
    if (!suffix.isEmpty()) {
        version = "$version-$suffix"
    }
}

ext {
    grpcVersion         = '1.48.1'
    protobufVersion     = '3.21.12'
    serviceGeneratorVersion = '3.3.0'
    genBaseDir = file("${buildDir}/generated/source/proto") // from protobuf plugin
}

dependencies {
    api "com.exactpro.th2:grpc-common:4.2.0-dev"
    api "com.google.protobuf:protobuf-java-util"
    api "io.grpc:grpc-stub"
    implementation "io.grpc:grpc-protobuf"
    implementation "io.grpc:grpc-core"
    implementation "io.grpc:grpc-netty"

    implementation "javax.annotation:javax.annotation-api:1.3.2"

    api "com.exactpro.th2:grpc-service-generator:$serviceGeneratorVersion"
}

sourceSets {
    main {
        proto {
            srcDirs 'proto'
        }
        // the proto plugins add generated dir to source sets
        resources {
            srcDirs "$genBaseDir/main/services/java/resources"
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
        services {
            artifact = "com.exactpro.th2:grpc-service-generator:${serviceGeneratorVersion}:all@jar"
        }
    }
    generateProtoTasks {
        ofSourceSet('main').configureEach {
            plugins {
                grpc {}
                services {
                    option 'javaInterfacesPath=./java'
                    option 'javaInterfacesImplPath=./java'
                    option 'javaMetaInfPath=./java/resources'
                    option 'pythonPath=./python'
                }
            }
        }
    }
}

compileJava.dependsOn('generateProto')
processResources.dependsOn('generateProto')

tasks {
    processResources {
        duplicatesStrategy = INCLUDE
    }
}

clean {
    delete genBaseDir
}